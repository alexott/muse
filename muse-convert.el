;; Helper commands for converting a LaTeX file into a Muse file

(defun muse-write-citation (note author citation pages)
  (save-excursion
    (goto-char (point-max))
    (if (= note 1)
	(insert "\nFootnotes:\n\n"))
    (let ((beg (point)))
      (insert "\n[" (number-to-string note) "]  " author)
      (if (and citation pages)
	  (insert ", " citation ", " pages))
      (insert "\n")
      (goto-char beg)
      (while (re-search-forward "p.\\\\[[:space:]]+" nil t)
	(replace-match "p."))
      (goto-char beg)
      (while (re-search-forward "--" nil t)
	(replace-match "-")))))

(defun muse-write-footnote (note text)
  (save-excursion
    (goto-char (point-max))
    (if (= note 1)
	(insert "\nFootnotes:\n\n"))
    (let ((beg (point)))
      (insert "\n[" (number-to-string note) "]  " text ?\n))))

;;;###autoload
(defun muse-latex-transform ()
  (interactive)
  (goto-char (point-min))
  (while (not (eobp))
    (cond
     ((or (looking-at "^\\\\documentclass")
	  (looking-at "^\\\\input")
	  (looking-at "^\\\\begin{document}")
	  (looking-at "^\\\\end{document}")
	  (looking-at "^\\\\author")
	  (looking-at "^\\\\\\(med\\|big\\|small\\)skip")
	  (looking-at "^\\\\maketitle"))
      (delete-region (point) (line-end-position)))
     ((looking-at "^\\\\title{\\(.+\\)}")
      (delete-region (match-end 1) (line-end-position))
      (delete-region (point) (match-beginning 1))
      (insert "#title ")))
    (forward-line))
  (goto-char (point-min))
  (while (re-search-forward "\\\\\\(l\\)?dots{}" nil t)
    (replace-match (concat (and (string= (match-string 1) "l") ".")
			   "...")))
  (goto-char (point-min))
  (while (re-search-forward "\\(``\\|''\\)" nil t)
    (replace-match "\""))
  (goto-char (point-min))
  (while (re-search-forward "---" nil t)
    (replace-match " -- "))
  (goto-char (point-min))
  (while (re-search-forward "\\\\tableofcontents" nil t)
    (replace-match "<contents>"))
  (goto-char (point-min))
  (while (re-search-forward "\\\\\\\\" nil t)
    (replace-match ""))
  (goto-char (point-min))
  (while (re-search-forward "\\\\\\(sub\\)?section{\\([^}]+\\)}" nil t)
    (replace-match (concat (if (string= (match-string 1) "sub")
			       "**" "*")
			   " " (match-string 2))))
  (goto-char (point-min))
  (while (re-search-forward "\\\\\\(begin\\|end\\){verse}" nil t)
    (replace-match (concat "<" (if (string= (match-string 1) "end") "/")
			   "verse>")))
  (goto-char (point-min))
  (while (re-search-forward "\\\\\\(begin\\|end\\){quote}\n" nil t)
    (replace-match ""))
  (goto-char (point-min))
  (while (re-search-forward
	  "\\\\\\(emph\\|textbf\\){\\([^}]+?\\)\\(\\\\/\\)?}" nil t)
    (replace-match
     (if (string= (match-string 1) "emph") "*\\2*" "**\\2**")))
  (let ((footnote-index 1))
    (goto-char (point-min))
    (while (re-search-forward
	    (concat "\\\\\\(q\\)?\\(footnote\\|excerpt\\)\\(np\\)?"
		    "\\({\\([^}]+\\)}\\)?"
		    "\\({\\([^}]+\\)}{\\([^}]+\\)}\\)?{\\([^}]+\\)}") nil t)
      (let ((beg (match-beginning 0))
	    (end (match-end 0)))
	(unless (string= (match-string 2) "footnote")
	  (if (null (match-string 1))
	      (insert "  " (match-string 9))
	    (let ((b (point)) e)
	      (insert "\"" (match-string 9) "\"")
	      (setq e (point-marker))
	      (save-match-data
		(save-excursion
		  (goto-char b)
		  (while (< (point) e)
		    (if (looking-at "\\s-+")
			(delete-region (match-beginning 0)
				       (match-end 0)))
		    (forward-line)))))))
	(insert "[" (number-to-string footnote-index) "]")
	(if (string= (match-string 2) "footnote")
	    (muse-write-footnote footnote-index (match-string 9))
	  (muse-write-citation footnote-index (match-string 5)
				     (match-string 7) (match-string 8)))
	(setq footnote-index (1+ footnote-index))
	(delete-region beg end))))
  (goto-char (point-min))
  (while (looking-at "\n") (delete-char 1))
  (goto-char (point-min))
  (while (re-search-forward "\n\n+" nil t)
    (replace-match "\n\n")))

(provide 'muse-convert)
